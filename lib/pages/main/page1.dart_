import 'dart:async';
import 'dart:io';

import 'package:dio/dio.dart';
import 'package:dynamic_parallel_queue/dynamic_parallel_queue.dart';
import 'package:file_selector/file_selector.dart';
import 'package:flutter/material.dart';
import 'package:flutter_hls_parser/flutter_hls_parser.dart';
import 'package:get/get.dart';
import 'package:path/path.dart' as path;
import 'package:url_launcher/url_launcher_string.dart';

import '../../file_task.dart';
import '../../log.dart';
import '../../setting.dart';
import '../../setup.dart';
import '../../utils.dart';

class MyHomePage extends StatefulWidget {
  const MyHomePage({Key? key}) : super(key: key);

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage>
    with SingleTickerProviderStateMixin {
  final Rx<RxStatus> status = RxStatus.empty().obs;
  final RxList<Log> logs = RxList();
  late final TabController _tabController =
      TabController(length: 3, vsync: this);
  Timer? looper;
  final RxInt _tabIndex = 0.obs;
  final Rxn<TaskStatus?> _taskStatus = Rxn();
  final hls = Setting.hls.controller();
  final proxy = Setting.proxy.controller();
  final savePath = Setting.savePath.controller();
  final RxBool enable = RxBool(true);

  final RxMap<String, FileTask> tasks = RxMap();
  final downloadQueue = Queue(parallel: Setting.downloadParallel.value);

  @override
  void initState() {
    super.initState();

    _tabController.addListener(() {
      _tabIndex.value = _tabController.index;
    });

    /// 监听ua变化，设置到dio
    Setting.userAgent.listen((val) => createHttp());

    /// 监听下载并行设置
    Setting.downloadParallel.listen((val) {
      downloadQueue.parallel = val;
    });

    /// 监听重试值
    Setting.errorRetry.listen((val) => createHttp());
    status.listen((status) {
      enable.value = status.isEmpty;
    });
  }

  void log(String text, [LogType type = LogType.normal]) =>
      logs.insert(0, Log(text, DateTime.now(), type));

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      floatingActionButton: FloatingActionButton(
        child: Text('测试'),
        onPressed: () {
          ffmpegVersion().then((value) => print(value));
        },
      ),
      body: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: <Widget>[
          ListTile(
              title: Obx(
            () => TextField(
              controller: hls.controller,
              enabled: enable.value,
              decoration: InputDecoration(labelText: 'HLS源，支持Live及VOD'),
            ),
          )),
          ListTile(
            title: Obx(() => TextField(
                  controller: proxy.controller,
                  enabled: enable.value,
                  decoration: InputDecoration(
                    labelText: '代理，例如 127.0.0.1:7890',
                    prefixText: 'http://',
                  ),
                )),
          ),
          ListTile(
              title: TextField(
            readOnly: true,
            controller: savePath.controller,
            decoration: InputDecoration(
              labelText: '点击选择存储路径',
              suffix: Row(mainAxisSize: MainAxisSize.min, children: [
                Obx(() => TextButton.icon(
                      icon: Icon(Icons.create_new_folder),
                      label: Text('选择'),
                      onPressed: enable.value == true
                          ? () async {
                              final path = await getDirectoryPath(
                                initialDirectory: Setting.savePath.value,
                                confirmButtonText: '选择',
                              );
                              if (path != null) {
                                Setting.savePath.set(path);
                              }
                            }
                          : null,
                    )),
                TextButton.icon(
                  icon: Icon(Icons.folder_open),
                  label: Text('打开'),
                  onPressed: () {
                    if (Setting.savePath.isBlank!) return;
                    launchUrlString('file://${Setting.savePath.value}');
                  },
                ),
              ]),
            ),
          )),
          ListTile(
            title: Obx(
              () => Row(
                children: [
                  if (status.value.isEmpty) ...[
                    ElevatedButton(
                      onPressed: startTask,
                      style: ElevatedButton.styleFrom(
                        primary: Colors.teal,
                      ),
                      child: Text('开始任务'),
                    ),
                    Padding(
                      padding: EdgeInsets.only(left: 10),
                      child: Text(
                        '默认下载码率最高的variant',
                        style: TextStyle(color: Colors.grey, fontSize: 12),
                      ),
                    ),
                  ],
                  if (status.value.isLoading)
                    ElevatedButton(
                      style: ElevatedButton.styleFrom(
                        primary: Colors.red,
                      ),
                      onPressed: stopTask,
                      child: Text('停止任务'),
                    ),
                ],
              ),
            ),
          ),
          Divider(),
          tab(),
        ],
      ),
    );
  }

  void startTask() {
    if (!status.value.isEmpty) return;
    status.value = RxStatus.loading();
    if (Setting.hls.isBlank!) {
      return log('请填写Hls来源', LogType.error);
    }
    if (Setting.savePath.isBlank!) {
      return log('请选择保存路径', LogType.error);
    } else {
      final dir = Directory(Setting.savePath.value);
      if (!dir.existsSync()) {
        return log('存储目录不存在', LogType.error);
      }
    }
    parseHls(Uri.parse(Setting.hls.value))
        .catchError((e) => status.value = RxStatus.empty());
  }

  void stopTask() {
    looper?.cancel();
    downloadQueue.clear();
    status.value = RxStatus.empty();
  }

  Future<void> parseHls(Uri url, [HlsMasterPlaylist? masterPlaylist]) async {
    HlsPlaylist playlist;
    try {
      print('parseHls $url\n'
          '${masterPlaylist == null ? '没有' : '有'}提供主体m3u8');
      final data = await http.getUri(url).then((res) => res.data);
      // print('m3u8 内容\n $data');
      playlist = await HlsPlaylistParser.create(masterPlaylist: masterPlaylist)
          .parseString(url, data);
    } catch (e) {
      if (e is DioError) {
        log('Hls源返回网络错误：\n' + e.message, LogType.error);
      } else {
        log('未知错误：\n' + e.toString(), LogType.error);
      }
      status.value = RxStatus.empty();
      rethrow;
    }
    if (playlist is HlsMasterPlaylist) {
      // master m3u8 file
      print('m3u8主体 变体(${playlist.variants.length})');
      playlist.variants
        ..sort((a, b) => b.format.bitrate! - a.format.bitrate!)
        ..forEach((v) {
          log('variants 分辨率 ${v.format.width} x ${v.format.height}, 码率 ${v.format.bitrate}\n${v.url}');
        });
      if (status.value.isLoading) {
        return parseHls(playlist.variants.first.url, playlist);
      }
    } else if (playlist is HlsMediaPlaylist) {
      print('m3u8媒体');
      if (!playlist.hasEndTag && looper == null) {
        print('直播型m3u8，创建循环读取');
        looper?.cancel();
        looper = Timer.periodic(Duration(seconds: 2), (timer) {
          parseHls(url, masterPlaylist);
        });
      }
      // media m3u8 file
      mediaM3u8(playlist);
    }
  }

  void mediaM3u8(HlsMediaPlaylist variant) {
    print(variant.segments.first.url);
    variant.segments.forEach((segment) {
      if (tasks.containsKey(segment.url)) return;
      if (!tasks.containsKey(segment.url!)) {
        final task = FileTask(
          segment.url!,
          path.join(Setting.savePath.value,
              Uri.parse(segment.url!).pathSegments.last),
        );
        tasks[segment.url!] = task;
        downloadQueue.add(() async {
          await task.download();
        });
      }
    });
  }

  Widget tab() {
    return Expanded(
      child: Column(
        children: [
          SizedBox(
            height: 28,
            child: Row(
              mainAxisAlignment: MainAxisAlignment.start,
              children: [
                TabBar(
                  controller: _tabController,
                  indicatorSize: TabBarIndicatorSize.label,
                  labelColor: Colors.black,
                  unselectedLabelColor: Colors.grey,
                  isScrollable: true,
                  tabs: [
                    Tab(text: '设置'),
                    Obx(() => Tab(text: '日志 [${logs.length}]')),
                    Obx(() => Tab(text: '碎片下载列表 [${tasks.length}]')),
                  ],
                ),
                Expanded(child: toolBar()),
              ],
            ),
          ),
          Expanded(
            child: TabBarView(
              controller: _tabController,
              children: [
                SettingWidget(),
                LogListWidget(logs: logs),
                Obx(() => TaskListWidget(
                      tasks: tasks.value,
                      status: _taskStatus.value,
                    )),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget toolBar() {
    return Obx(() {
      if (_tabIndex.value == 0) return SizedBox();
      if (_tabIndex.value == 1) {
        return Row(
          mainAxisAlignment: MainAxisAlignment.end,
          children: [
            TextButton(
                onPressed: () => logs.clear(),
                child: Text(
                  '清空',
                  style: TextStyle(color: Colors.red),
                )),
          ],
        );
      }
      return Row(
        mainAxisAlignment: MainAxisAlignment.end,
        children: [
          TextButton(
            onPressed: () => Get.toNamed('/mergeMp4', arguments: tasks.values),
            child: Text('合并'),
          ),
          SizedBox(width: 10),
          TextButton(
            onPressed: () {
              tasks
                ..clear()
                ..refresh();
              downloadQueue.clear();
            },
            child: Text(
              '清空',
              style: TextStyle(color: Colors.red),
            ),
          ),
          SizedBox(width: 10),
          DropdownButtonHideUnderline(
            child: DropdownButton<TaskStatus?>(
              items: [
                DropdownMenuItem(
                  value: null,
                  child: Text('全部'),
                ),
                DropdownMenuItem(
                  value: TaskStatus.success,
                  child: Text('已完成'),
                ),
                DropdownMenuItem(
                  value: TaskStatus.loading,
                  child: Text('下载中'),
                ),
                DropdownMenuItem(
                  value: TaskStatus.wait,
                  child: Text('等候中'),
                ),
                DropdownMenuItem(
                  value: TaskStatus.error,
                  child: Text('错误'),
                ),
              ],
              hint: Text('筛选任务'),
              value: _taskStatus.value,
              onChanged: (val) {
                _taskStatus.value = val;
              },
            ),
          )
        ],
      );
    });
  }
}
